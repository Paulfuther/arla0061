# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SignatureDataInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_security_store': 'DocumentSecurityStore',
        'signature_data': 'str',
        'signature_field_name': 'str'
    }

    attribute_map = {
        'document_security_store': 'documentSecurityStore',
        'signature_data': 'signatureData',
        'signature_field_name': 'signatureFieldName'
    }

    def __init__(self, document_security_store=None, signature_data=None, signature_field_name=None):  # noqa: E501
        """SignatureDataInfo - a model defined in Swagger"""  # noqa: E501

        self._document_security_store = None
        self._signature_data = None
        self._signature_field_name = None
        self.discriminator = None

        if document_security_store is not None:
            self.document_security_store = document_security_store
        if signature_data is not None:
            self.signature_data = signature_data
        if signature_field_name is not None:
            self.signature_field_name = signature_field_name

    @property
    def document_security_store(self):
        """Gets the document_security_store of this SignatureDataInfo.  # noqa: E501


        :return: The document_security_store of this SignatureDataInfo.  # noqa: E501
        :rtype: DocumentSecurityStore
        """
        return self._document_security_store

    @document_security_store.setter
    def document_security_store(self, document_security_store):
        """Sets the document_security_store of this SignatureDataInfo.


        :param document_security_store: The document_security_store of this SignatureDataInfo.  # noqa: E501
        :type: DocumentSecurityStore
        """

        self._document_security_store = document_security_store

    @property
    def signature_data(self):
        """Gets the signature_data of this SignatureDataInfo.  # noqa: E501

          # noqa: E501

        :return: The signature_data of this SignatureDataInfo.  # noqa: E501
        :rtype: str
        """
        return self._signature_data

    @signature_data.setter
    def signature_data(self, signature_data):
        """Sets the signature_data of this SignatureDataInfo.

          # noqa: E501

        :param signature_data: The signature_data of this SignatureDataInfo.  # noqa: E501
        :type: str
        """

        self._signature_data = signature_data

    @property
    def signature_field_name(self):
        """Gets the signature_field_name of this SignatureDataInfo.  # noqa: E501

          # noqa: E501

        :return: The signature_field_name of this SignatureDataInfo.  # noqa: E501
        :rtype: str
        """
        return self._signature_field_name

    @signature_field_name.setter
    def signature_field_name(self, signature_field_name):
        """Sets the signature_field_name of this SignatureDataInfo.

          # noqa: E501

        :param signature_field_name: The signature_field_name of this SignatureDataInfo.  # noqa: E501
        :type: str
        """

        self._signature_field_name = signature_field_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SignatureDataInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignatureDataInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
